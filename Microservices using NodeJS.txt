Microservices using NodeJS

Pre-requisite:
Java script

Node and Express JS:

Web application/ website:
	Monolithic:
	https://www.flipkart.com/account/
	https://www.flipkart.com/viewcart/
	Eg:
		Amazon.com:
			grocery
			typical>> flash
			prime
			pay

	Challenges:
		Bug tracking
		Load issue
		Traffic issue

	Microservice Architecture:
		loosely coupled>>
			Amazon.in>> gateway-app>> 8080
				grocery-app >> 9091
				typical-app   >> 9092
				prime-app    >> 9093
				amazonpay-app 9094


Basics Java script:
	Data types:
		Number, Object, Array, Boolean, Date
		string
	variables:
		const, var, let
		static
			const variable=value>> constant
		dynamic
			var variable=value
			let variable=value
	operators:
		arithmetic, relational, logical, unary, ternary, 
	Functions:
		function funName(){
			// fun def
			// return>> optional
		}

		// arrow/ fat-arrow
		const funName = ()=>{
			// definition
		}

		array: CRUD


Java script:
	client side with html to perform client side events
	server side/ standalone: node 

	javac filename.java
	java filename
	
	python filename.py

	node filename.js >> execute

install node js

nodejs.org
download nodejs and install

to verify:
open command prompt and type following:
node --version


https://github.com/razzaksr/MEC-Node-Microservice-Internship




Node JS:
Server side js code

Full stack
React JS >> front end >> server
	pages/UI
Express JS> back end>> server>> ip/ localhost, port
	js code
	accept request via url
		types:
			post, get, update, delete
	connecting db

Mongo DB> JSON/ BSON>> Data end



pip install numpy

node package manager>> npm


npm i express

central repo downloading to your local system
npmjs.org

node_modules >> physical location of downloaded packages

npm commands:
start
init
run
deploy
test

project:
	npm init	>> terminal interactive mode
	npm init -y>> name of the project same as opened folder

	package.json: project information
		{
			name
			version
			type
			dependency:{}
			script:{
				"start":"node filename.js"
			}
		}

	npm start

	package-lock.json
	node_modules

	import numpy as np
	const identifier require('package')
	
	Classname objec = new Classname()
	


	Express based Rest API:
		results/outcomes not in pages instead in the form of JSON

https://meet.google.com/mfo-eqjd-hks?authuser=4&pli=1

ip/ host>> meet.google.com
endpoint> mfo-eqjd-hks
parameters> authuser=4&pli=1

		client: rest client
			create requests such as post, get, put, delete
			request:
				type ip:port/endpoints
		server: express
			endpoints with req.type