Microservices using NodeJS

Pre-requisite:
Java script

Node and Express JS:

Web application/ website:
	Monolithic:
	https://www.flipkart.com/account/
	https://www.flipkart.com/viewcart/
	Eg:
		Amazon.com:
			grocery
			typical>> flash
			prime
			pay

	Challenges:
		Bug tracking
		Load issue
		Traffic issue

	Microservice Architecture:
		loosely coupled>>
			Amazon.in>> gateway-app>> 8080
				grocery-app >> 9091
				typical-app   >> 9092
				prime-app    >> 9093
				amazonpay-app 9094


Basics Java script:
	Data types:
		Number, Object, Array, Boolean, Date
		string
	variables:
		const, var, let
		static
			const variable=value>> constant
		dynamic
			var variable=value
			let variable=value
	operators:
		arithmetic, relational, logical, unary, ternary, 
	Functions:
		function funName(){
			// fun def
			// return>> optional
		}

		// arrow/ fat-arrow
		const funName = ()=>{
			// definition
		}

		array: CRUD


Java script:
	client side with html to perform client side events
	server side/ standalone: node 

	javac filename.java
	java filename
	
	python filename.py

	node filename.js >> execute

install node js

nodejs.org
download nodejs and install

to verify:
open command prompt and type following:
node --version


https://github.com/razzaksr/MEC-Node-Microservice-Internship




Node JS:
Server side js code

Full stack
React JS >> front end >> server
	pages/UI
Express JS> back end>> server>> ip/ localhost, port
	js code
	accept request via url
		types:
			post, get, update, delete
	connecting db

Mongo DB> JSON/ BSON>> Data end



pip install numpy

node package manager>> npm


npm i express

central repo downloading to your local system
npmjs.org

node_modules >> physical location of downloaded packages

npm commands:
start
init
run
deploy
test

project:
	npm init	>> terminal interactive mode
	npm init -y>> name of the project same as opened folder

	package.json: project information
		{
			name
			version
			type
			dependency:{}
			script:{
				"start":"node filename.js"
			}
		}

	npm start

	package-lock.json
	node_modules

	import numpy as np
	const identifier require('package')
	
	Classname objec = new Classname()
	


	Express based Rest API:
		results/outcomes not in pages instead in the form of JSON

https://meet.google.com/mfo-eqjd-hks?authuser=4&pli=1

ip/ host>> meet.google.com
endpoint> mfo-eqjd-hks
parameters> authuser=4&pli=1

		client: rest client
			create requests such as post, get, put, delete
			request:
				type ip:port/endpoints
		server: express
			endpoints with req.type


to auto restart
nodemon
package.json
"start":"node file.js"

"start":"nodemon file.js"


client:
broswer>> get, delete
rest client>> vs code extension


request:
header>> authorization
parameter>> url/jdvjb
body>> url


CRUD >> data base

MySQL
Mongo DB:
Cluster>> atlas
Databases>> 
Collections(Tables)
Document(row)
	fields(Column)

insertOne({})
deleteOne
find({})
updateOne
.
.

document:
{
"key":"value"
}




MongoDB<<>> Express API(CRUD)<<>> Rest Client

ATLAS		mongoose, express
			body-parser, nodemon


Usecase:
Course: 9090	>> express-mongo-crud
	default: _id>> primary key
	user defined fileds>>id, name, hours, fees, expert(String)
Expert: 6060:	>> express-expert-crud
	deafult: _id>> primary
	user defined fields>>id, name, experience, contact, designation
	read>> expert details also courses offered by experts

Discovery Server: 
	in order to make communication between service(expert, course)
	eg: netflix-eureka-server(Spring boot)>> 8761
		consul 8500

Setting UP Consul:
	download zip
	extract
	consul.exe>> set path
		search>>env>> edit system environment variables>> environment variable>> second section find variable name "path">> edit>> new >> paste the location of consul.exe folder

cmd:
consul agent -dev

inter-service communication:
	register services in consul:
		npm i consul axios
	
	expert-service:
		6060/	>> read experts>> expert details
				expert's courses read
	course-service
		9090/	>> read all courses
		9090/trainer/name	>> read specifc trainer's courses

Gateway:
	dependency: express, consul, nodemon, http-proxy-middleware
	localhost: 5050 >> 
		localhost:5050/expert/ *expert endpoints*
		localhost:5050/course/ *course endpoint*



case study:
bank_customer:
	fullname, username, password, aadhaar, pan, contact, email
bank_account:
	accountNumber, accountBalance, customer(String), accountStatus(suspend, active)

while showing cusotmer details view their respective accounts using inter service communication via consul
build gateway



card
loan
deposit
beneficiary





















































const express = require('express')
const bodyParser = require('body-parser')
const mongoose = require('mongoose')
const schema = require('./expertSchema')
const model = mongoose.model('expert',schema)
const Consul = require('consul')
const axios = require('axios')

const app = express()
const serviceKey = "expert-service"
app.use(bodyParser.urlencoded({extended:true}))
app.use(bodyParser.json())
const consul = new Consul()// object

// register expert service in consul discovery server
consul.agent.service.register({
    id:serviceKey,
    name:serviceKey,
    address:"localhost",
    port:6060
},
(err)=>{
    if(err)
        throw err;
    console.log('Expert Service successfully registered')
})
// deregister from consul discovery server whenever ctrl+c/ interruption happens
process.on("SIGINT",async()=>{
    consul.agent.service.deregister(serviceKey,()=>{
        if(err)
            throw err
        console.log("Expert service deregistered")
    })
})

const logicalExpert = (expert,courses) => {
    return{
        expert,
        courses
    }
}

// MongoDB connection
mongoose.connect('mongodb+srv://razak:mohamed@cluster0.ptmlylq.mongodb.net/mecmicroservice?retryWrites=true&w=majority&appName=Cluster0');

// CRUD
app.post('/',async(req,res)=>{
    const obj = new model({
        expertId:req.body.expertId,
        expertName:req.body.expertName,
        expertExperience:req.body.expertExperience,
        expertContact:req.body.expertContact,
        expertDesignation:req.body.expertDesignation
    })
    const result = await obj.save()
    res.json(result)
})

// read all experts
app.get('/',async(req,res)=>{
    var experts = await model.find()
    // fetch the courses of the specific expert via consul with axios
    try{
        const services = await consul.catalog.service.nodes('course-service')
        if(services.length==0)
            throw new Error("Course service not registered in consul")
        const coursServ = services[0]
        // console.log(coursServ.Address,coursServ.ServicePort)
        // contact course service by its address, port and mappings
        var updatedExperts = []
        const promises = experts.map(async(each)=>{
            const received = await axios.get(`http://${coursServ.Address}:${coursServ.ServicePort}/trainer/${each.expertId}`)
            // console.log(received.data)
            // logical property unlike physical/ actual
            const obj = logicalExpert(each,received.data)
            //console.log(obj)
            updatedExperts.push(obj)
            // console.log(updatedExperts.length)
        })
        //console.log(experts)
        await Promise.all(promises)
    }
    catch(error){
        return res.json({message:"Error fetching courses"})
    }
    res.json(updatedExperts)
})

// read by uniqe field
app.get('/:unique',async(req,res)=>{
    const fetched = await model.findById(id=req.params.unique)
    res.json(fetched)
})

// read by other fields
app.get('/experience/:exp',async(req,res)=>{
    const list = await model.find({expertExperience:req.params.exp})
    res.json(list)
})

// update
app.put('/',async(req,res)=>{
    const result = await model.updateOne({_id:req.body._id},req.body,{upsert:true})
    res.json(result)
})

// delete
app.delete('/:id',async(req,res)=>{
    await model.findOneAndDelete(id=req.params.id)
    res.json("Deleted")
})

app.listen(6060,async()=>{
    console.log('expert endpoints are ready!!!!!!!!!!')
})





